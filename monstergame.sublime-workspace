{
	"auto_complete":
	{
		"selected_items":
		[
		]
	},
	"buffers":
	[
		{
			"file": "game.py",
			"settings":
			{
				"buffer_size": 13335,
				"encoding": "UTF-8",
				"line_ending": "Unix",
				"name": "import pygame"
			},
			"undo_stack":
			[
				[
					275,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAzDUAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					277,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAADMNQAAAAAAAAAAAAAAAPC/"
				],
				[
					278,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAGCYAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					279,
					3,
					"left_delete",
					null,
					"AwAAABcmAAAAAAAAFyYAAAAAAAABAAAAChYmAAAAAAAAFiYAAAAAAAABAAAAPxUmAAAAAAAAFSYAAAAAAAABAAAAIA",
					"AQAAAAAAAAABAAAAGCYAAAAAAAAYJgAAAAAAAAAAAAAAAPC/"
				],
				[
					282,
					1,
					"paste",
					null,
					"AQAAAEolAAAAAAAAYksAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAASiUAAAAAAABKJQAAAAAAAAAAAAAAAPC/"
				],
				[
					283,
					2,
					"left_delete",
					null,
					"AgAAAGFLAAAAAAAAYUsAAAAAAAABAAAACmBLAAAAAAAAYEsAAAAAAAABAAAAPw",
					"AQAAAAAAAAABAAAAYksAAAAAAABiSwAAAAAAAAAAAAAAAPC/"
				],
				[
					286,
					5,
					"left_delete",
					null,
					"BQAAAHVLAAAAAAAAdUsAAAAAAAABAAAAOnRLAAAAAAAAdEsAAAAAAAABAAAAZXNLAAAAAAAAc0sAAAAAAAABAAAAc3JLAAAAAAAAcksAAAAAAAABAAAAbHFLAAAAAAAAcUsAAAAAAAABAAAAZQ",
					"AQAAAAAAAAABAAAAdksAAAAAAAB2SwAAAAAAAAAAAAAAAPC/"
				],
				[
					287,
					1,
					"left_delete",
					null,
					"AQAAAG1LAAAAAAAAbUsAAAAAAAAEAAAAICAgIA",
					"AQAAAAAAAAABAAAAcUsAAAAAAABxSwAAAAAAAAAAAAAAAPC/"
				],
				[
					289,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAiTAAAAAAAAAAAAAAAAPC/"
				],
				[
					290,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAALREAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					292,
					1,
					"left_delete",
					null,
					"AQAAAAAAAAAAAAAAAAAAAAAAAAAtEQAAICAgICAgICAgICAgIyBTcGF3biBlbmVtaWVzIG9uIGEgZGVsYXkKICAgICAgICAgICAgaWYgbm90IGNvb2xkb3duOgogICAgICAgICAgICAgICAgaWYgd2F2ZSA9PSAxIGFuZCBsZW4oZW5lbWllcykgPT0gMCBhbmQgd2F2ZV8xX2Nvb2xkb3duOgogICAgICAgICAgICAgICAgICAgIHdhdmVfdGV4dCA9ICJXYXZlIDEiCiAgICAgICAgICAgICAgICAgICAgd2F2ZV9zdGFydF90aW1lID0gcHlnYW1lLnRpbWUuZ2V0X3RpY2tzKCkKICAgICAgICAgICAgICAgICAgICB3YXZlXzFfY29vbGRvd24gPSBGYWxzZQogICAgICAgICAgICAgICAgZWxpZiB3YXZlID09IDIgYW5kIGxlbihlbmVtaWVzKSA9PSAwIGFuZCB3YXZlXzJfY29vbGRvd246CiAgICAgICAgICAgICAgICAgICAgd2F2ZV90ZXh0ID0gIldhdmUgMiIKICAgICAgICAgICAgICAgICAgICB3YXZlX3N0YXJ0X3RpbWUgPSBweWdhbWUudGltZS5nZXRfdGlja3MoKQogICAgICAgICAgICAgICAgICAgIHdhdmVfMl9jb29sZG93biA9IEZhbHNlCiAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgIGlmIHdhdmUgPT0gMToKICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlfc3Bhd25fZGVsYXkgPSB3YXZlXzFfZW5lbXlfc2l6ZSAqIDMKICAgICAgICAgICAgICAgICAgICBpZiB3YXZlID09IDI6CiAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15X3NwYXduX2RlbGF5ID0gMAoKICAgICAgICAgICAgICAgICAgICBpZiBlbmVteV9zcGF3bl90aW1lciA8PSAwOgogICAgICAgICAgICAgICAgICAgICAgICBlbmVteV9zaXplID0gd2F2ZV8xX2VuZW15X3NpemUgaWYgd2F2ZSA9PSAxIGVsc2Ugd2F2ZV8yX2VuZW15X3NpemUKICAgICAgICAgICAgICAgICAgICAgICAgZW5lbXlfaGVhbHRoID0gd2F2ZV8xX2VuZW15X2hlYWx0aCBpZiB3YXZlID09IDEgZWxzZSB3YXZlXzJfZW5lbXlfaGVhbHRoCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15X2RhbWFnZSA9IHdhdmVfMV9lbmVteV9kYW1hZ2UgaWYgd2F2ZSA9PSAxIGVsc2Ugd2F2ZV8yX2VuZW15X2RhbWFnZQogICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVfZW5lbXkoZW5lbXlfc2l6ZSwgZW5lbXlfaGVhbHRoLCBlbmVteV9kYW1hZ2UpCiAgICAgICAgICAgICAgICAgICAgICAgIGVuZW15X3NwYXduX3RpbWVyID0gZW5lbXlfc3Bhd25fZGVsYXkKICAgICAgICAgICAgICAgICAgICBlbHNlOgogICAgICAgICAgICAgICAgICAgICAgICBlbmVteV9zcGF3bl90aW1lciAtPSAxCgogICAgICAgICAgICAjIERyYXcgYW5kIG1vdmUgZW5lbWllcwogICAgICAgICAgICBmb3IgZW5lbXkgaW4gbGlzdChlbmVtaWVzKTogICMgSXRlcmF0ZSBvdmVyIGEgY29weSBvZiB0aGUgbGlzdAogICAgICAgICAgICAgICAgcHlnYW1lLmRyYXcucmVjdChzY3JlZW4sIGJsYWNrLCAoZW5lbXlbMF0sIGVuZW15WzFdLCBlbmVteVszXSwgZW5lbXlbM10pKQogICAgICAgICAgICAgICAgZW5lbXlbMV0gKz0gZW5lbXlfdmVsb2NpdHkKCiAgICAgICAgICAgICAgICAjIFJlbW92ZSBlbmVtaWVzIHRoYXQgZ28gb2ZmIHNjcmVlbgogICAgICAgICAgICAgICAgaWYgZW5lbXlbMV0gPiBzY3JlZW5faGVpZ2h0OgogICAgICAgICAgICAgICAgICAgIGVuZW1pZXMucmVtb3ZlKGVuZW15KQogICAgICAgICAgICAgICAgICAgIGVuZW1pZXNfcGFzc2VkICs9IDEgICMgSW5jcmVtZW50IHBhc3NlZCBlbmVtaWVzIGNvdW50ZXIKICAgICAgICAgICAgICAgICAgICBpZiBlbmVtaWVzX3Bhc3NlZCA+IG1heF9wYXNzZWRfZW5lbWllczoKICAgICAgICAgICAgICAgICAgICAgICAgcGxheWVyX2hlYWx0aCA9IDAgICMgUGxheWVyIGRpZXMgaWYgbW9yZSB0aGFuIDUgZW5lbWllcyBwYXNzCgogICAgICAgICAgICAjIEhhbmRsZSB3YXZlIHRyYW5zaXRpb25zCiAgICAgICAgICAgIGlmIHdhdmUgPT0gMSBhbmQgbGVuKGVuZW1pZXMpID09IDAgYW5kIG5vdCB3YXZlXzFfY29vbGRvd246CiAgICAgICAgICAgICAgICB3YXZlICs9IDEKICAgICAgICAgICAgICAgIHdhdmVfMV9jb29sZG93biA9IFRydWUKICAgICAgICAgICAgICAgIGNvb2xkb3duID0gVHJ1ZQogICAgICAgICAgICAgICAgY29vbGRvd25fdGltZXIgPSAxNTAgICMgUmVzZXQgY29vbGRvd24gdGltZXIKICAgICAgICAgICAgICAgIGNvb2xkb3duX2NvdW50ZG93biA9IGNvb2xkb3duX3NlY29uZHMgKiAzMCAgIyBSZXNldCBjb3VudGRvd24gZm9yIG5leHQgd2F2ZQoKICAgICAgICAgICAgZWxpZiB3YXZlID09IDIgYW5kIGxlbihlbmVtaWVzKSA9PSAwIGFuZCBub3Qgd2F2ZV8yX2Nvb2xkb3duOgogICAgICAgICAgICAgICAgd2F2ZSArPSAxCiAgICAgICAgICAgICAgICB3YXZlXzJfY29vbGRvd24gPSBUcnVlCiAgICAgICAgICAgICAgICBjb29sZG93biA9IFRydWUKICAgICAgICAgICAgICAgIGNvb2xkb3duX3RpbWVyID0gMTUwICAjIFJlc2V0IGNvb2xkb3duIHRpbWVyCiAgICAgICAgICAgICAgICBjb29sZG93bl9jb3VudGRvd24gPSBjb29sZG93bl9zZWNvbmRzICogMzAgICMgUmVzZXQgY291bnRkb3duIGZvciBuZXh0IHdhdmUKCiAgICAgICAgICAgICMgRHJhdyBoZWFsdGggYmFyCiAgICAgICAgICAgIHB5Z2FtZS5kcmF3LnJlY3Qoc2NyZWVuLCBibGFjaywgKHNjcmVlbl93aWR0aCAtIDIxMCwgc2NyZWVuX2hlaWdodCAtIDMwLCAyMDAsIDIwKSkKICAgICAgICAgICAgcHlnYW1lLmRyYXcucmVjdChzY3JlZW4sIGdyZWVuLCAoc2NyZWVuX3dpZHRoIC0gMjEwLCBzY3JlZW5faGVpZ2h0IC0gMzAsIHBsYXllcl9oZWFsdGggKiAyLCAyMCkpCgogICAgICAgICAgICAjIERyYXcgd2F2ZSBpbmRpY2F0b3IKICAgICAgICAgICAgaWYgd2F2ZV90ZXh0OgogICAgICAgICAgICAgICAgY3VycmVudF90aW1lID0gcHlnYW1lLnRpbWUuZ2V0X3RpY2tzKCkKICAgICAgICAgICAgICAgIGlmIGN1cnJlbnRfdGltZSAtIHdhdmVfc3RhcnRfdGltZSA8IHdhdmVfZHVyYXRpb246CiAgICAgICAgICAgICAgICAgICAgd2F2ZV90ZXh0X3JlbmRlcmVkID0gd2F2ZV9mb250LnJlbmRlcih3YXZlX3RleHQsIFRydWUsIGJsYWNrKQogICAgICAgICAgICAgICAgICAgIHdhdmVfdGV4dF9yZWN0ID0gd2F2ZV90ZXh0X3JlbmRlcmVkLmdldF9yZWN0KGNlbnRlcj0oc2NyZWVuX3dpZHRoIC8vIDIsIDUwKSkKICAgICAgICAgICAgICAgICAgICBzY3JlZW4uYmxpdCh3YXZlX3RleHRfcmVuZGVyZWQsIHdhdmVfdGV4dF9yZWN0KQogICAgICAgICAgICAgICAgZWxzZToKICAgICAgICAgICAgICAgICAgICB3YXZlX3RleHQgPSAiIgoKICAgICAgICAgICAgIyBEcmF3IHNob3AgYnV0dG9uCiAgICAgICAgICAgIHB5Z2FtZS5kcmF3LnJlY3Qoc2NyZWVuLCAoMCwgMjU1LCAyNTUpLCBzaG9wX2J1dHRvbl9yZWN0KQogICAgICAgICAgICBzaG9wX3RleHQgPSBweWdhbWUuZm9udC5Gb250KE5vbmUsIDM2KS5yZW5kZXIoIlNob3AgKFMpIiwgVHJ1ZSwgYmxhY2spCiAgICAgICAgICAgIHNjcmVlbi5ibGl0KHNob3BfdGV4dCwgKHNjcmVlbl93aWR0aCAtIDEwNSwgMTUpKQoKICAgICAgICAgICAgIyBEcmF3IHBvaW50cyBjb3VudGVyIGluIHNob3AKICAgICAgICAgICAgcG9pbnRzX3RleHQgPSBweWdhbWUuZm9udC5Gb250KE5vbmUsIDI0KS5yZW5kZXIoZiJQb2ludHM6IHtwb2ludHN9IiwgVHJ1ZSwgYmxhY2spCiAgICAgICAgICAgIHNjcmVlbi5ibGl0KHBvaW50c190ZXh0LCAoMjAsIDIwKSkKCiAgICAgICAgICAgICMgRHJhdyB1cGdyYWRlIGJ1dHRvbnMgYW5kIGNvc3RzCiAgICAgICAgICAgIGlmIHNob3Bfb3BlbjoKICAgICAgICAgICAgICAgIGZvciBpLCByZWN0IGluIGVudW1lcmF0ZSh1cGdyYWRlX2J1dHRvbl9yZWN0cyk6CiAgICAgICAgICAgICAgICAgICAgcHlnYW1lLmRyYXcucmVjdChzY3JlZW4sICgyNTUsIDI1NSwgMCksIHJlY3QpCiAgICAgICAgICAgICAgICAgICAgdXBncmFkZV90ZXh0ID0gcHlnYW1lLmZvbnQuRm9udChOb25lLCAyNCkucmVuZGVyKGYie3VwZ3JhZGVfZGVzY3JpcHRpb25zW2ldfSAtIENvc3Q6IHt1cGdyYWRlX2Nvc3RzW2ldfSIsIFRydWUsIGJsYWNrKQogICAgICAgICAgICAgICAgICAgIHNjcmVlbi5ibGl0KHVwZ3JhZGVfdGV4dCwgKHJlY3QueCArIDEwLCByZWN0LnkgKyA1KSkKCiAgICAgICAgICAgICMgQ2hlY2sgaWYgZ2FtZSBvdmVyCiAgICAgICAgICAgIGlmIHBsYXllcl9oZWFsdGggPD0gMDoKICAgICAgICAgICAgICAgIGdhbWVfb3ZlciA9IFRydWUKCiAgICAgICAgICAgICMgVXBkYXRlIHRoZSBkaXNwbGF5CiAgICAgICAgICAgIHB5Z2FtZS5kaXNwbGF5LmZsaXAoKQoKICAgICAgICAgICAgIyBDYXAgdGhlIGZyYW1lIHJhdGUKICAgICAgICAgICAgcHlnYW1lLnRpbWUuQ2xvY2soKS50aWNrKDMwKQoKaWYgX19uYW1lX18gPT0gIl9fbWFpbl9fIjoKICAgIG1haW4oKQo",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAtEQAAAAAAAAAAAAAAAPC/"
				],
				[
					293,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAujMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					296,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAC6MwAAAAAAAAAAAAAAAPC/"
				],
				[
					297,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAujMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					299,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAAC6MwAAAAAAAAAAAAAAAPC/"
				],
				[
					300,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAA2DMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					309,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAADYMwAAAAAAAAAAAAAAAPC/"
				],
				[
					310,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAA2DMAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				],
				[
					312,
					1,
					"left_delete",
					null,
					"",
					"AQAAAAAAAAABAAAAAAAAAAAAAADYMwAAAAAAAAAAAAAAAPC/"
				],
				[
					313,
					1,
					"paste",
					null,
					"AQAAAAAAAAAAAAAAFzQAAAAAAAAAAAAA",
					"AQAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAPC/"
				]
			]
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/Users/coreenschaefer/Desktop/monster fighter2.py",
		"/Users/coreenschaefer/Desktop/fishinggame.py",
		"/Users/coreenschaefer/Desktop/monstergame.py",
		"/Users/coreenschaefer/Desktop/monster",
		"/Users/coreenschaefer/Desktop/moster fighting",
		"/Users/coreenschaefer/Desktop/random game",
		"/Users/coreenschaefer/Desktop/coins game.py",
		"/Users/coreenschaefer/Desktop/python 1.py",
		"/Users/coreenschaefer/Desktop/Script 1 .py"
	],
	"find":
	{
		"height": 0.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"scrollbar_highlights": true,
		"show_context": true,
		"use_buffer2": true,
		"use_gitignore": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"sheets":
			[
				{
					"buffer": 0,
					"file": "game.py",
					"selected": true,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 13335,
						"regions":
						{
						},
						"selection":
						[
							[
								13323,
								13323
							]
						],
						"settings":
						{
							"auto_name": "import pygame",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 4827.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"stack_multiselect": false,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 0.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 285.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "monstergame.sublime-project",
	"replace":
	{
		"height": 0.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
